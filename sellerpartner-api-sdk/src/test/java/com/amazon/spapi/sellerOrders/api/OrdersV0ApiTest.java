/*
 * Selling Partner API for Orders
 * The Selling Partner API for Orders helps you programmatically retrieve order information. These APIs let you develop fast, flexible, custom applications in areas like order synchronization, order research, and demand-based decision support tools. The Orders API supports orders that are two years old or less. Orders more than two years old will not show in the API response.  _Note:_ The Orders API supports orders from 2016 and after for the JP, AU, and SG marketplaces.
 *
 * OpenAPI spec version: v0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.amazon.spapi.sellerOrders.api;

import com.amazon.SellingPartnerAPIAA.LWAException;
import com.amazon.spapi.ApiException;
import com.amazon.spapi.sellerOrders.model.*;
import com.google.common.collect.Lists;
import com.google.gson.Gson;
import org.joda.time.LocalDateTime;
import org.junit.Test;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.List;

/**
 * API tests for OrdersV0Api
 */
//@SpringBootTest
public class OrdersV0ApiTest {


    private OrdersV0Api api = null;

    /**
     * Updates the shipment confirmation status for a specified order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 2 | 10 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void confirmShipmentTest() throws ApiException, LWAException, ApiException {
        String orderId = null;
        ConfirmShipmentRequest payload = null;
        api.confirmShipment(orderId, payload);

// TODO: test validations
    }

    /**
     * Returns the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrderTest() throws ApiException, LWAException {
        String orderId = "113-3988465-8408227";
        GetOrderResponse response = api.getOrder(orderId);
        System.out.println("response = " + new Gson().toJson(response));
    }

    @Test
    public void testOrder() {

    }

    /**
     * Returns the shipping address for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrderAddressTest() throws ApiException, LWAException {
        String orderId = "112-7280351-6762658";
        GetOrderAddressResponse response = api.getOrderAddress(orderId);
        System.out.println(response);

// TODO: test validations
    }

    /**
     * Returns buyer information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrderBuyerInfoTest() throws ApiException, LWAException {
        String orderId = null;
        GetOrderBuyerInfoResponse response = api.getOrderBuyerInfo(orderId);

// TODO: test validations
    }

    /**
     * Returns detailed order item information for the order that you specify. If NextToken is provided, it&#39;s used to retrieve the next page of order items.  __Note__: When an order is in the Pending state (the order has been placed but payment has not been authorized), the getOrderItems operation does not return information about pricing, taxes, shipping charges, gift status or promotions for the order items in the order. After an order leaves the Pending state (this occurs when payment has been authorized) and enters the Unshipped, Partially Shipped, or Shipped state, the getOrderItems operation returns information about pricing, taxes, shipping charges, gift status and promotions for the order items in the order.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrderItemsTest() throws ApiException, LWAException {
//        String orderId = "113-3988465-8408227";
        String orderId = "113-3988465-8408227";
        String nextToken = null;
        GetOrderItemsResponse response = api.getOrderItems(orderId, nextToken);
        System.out.println("response = " + new Gson().toJson(response));
    }

    /**
     * Returns buyer information for the order items in the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrderItemsBuyerInfoTest() throws ApiException, LWAException {
        String orderId = null;
        String nextToken = null;
        GetOrderItemsBuyerInfoResponse response = api.getOrderItemsBuyerInfo(orderId, nextToken);

// TODO: test validations
    }

    /**
     * Returns regulated information for the order that you specify.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrderRegulatedInfoTest() throws ApiException, LWAException {
        String orderId = "112-7280351-6762658";
        GetOrderRegulatedInfoResponse response = api.getOrderRegulatedInfo(orderId);

// TODO: test validations
    }

    @Test
    public void xx(){
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
        LocalDateTime localDateTime = LocalDateTime.now();
        System.err.println(localDateTime);
    }
    /**
     * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrdersTest() throws ApiException, LWAException {
        List<String> marketplaceIds = null;
        String createdAfter = null;
//        String createdAfter = "2024-06-01";
        String createdBefore = null;

        LocalDateTime localDateTime = LocalDateTime.now();
//        localDateTime.minusHours(3);
        LocalDateTime newLocalDatTime=localDateTime.minusDays(3);
        String lastUpdatedAfter = newLocalDatTime.toString();
        String lastUpdatedBefore = null;
        /**
         * A list of OrderStatus values used to filter the results.
         *
         * Possible values:
         * - PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.)
         * - Pending (The order has been placed but payment has not been authorized.)
         * - Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.)
         * - PartiallyShipped (One or more, but not all, items in the order have been shipped.)
         * - Shipped (All items in the order have been shipped.)
         * - InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.)
         * - Canceled (The order has been canceled.)
         * - Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         */
        List<String> orderStatuses = null;
        /**
         * A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: AFN (Fulfillment by Amazon); MFN (Fulfilled by the seller).
         */
        List<String> fulfillmentChannels = null;
        List<String> paymentMethods = null;
        String buyerEmail = null;
        String sellerOrderId = null;
        Integer maxResultsPerPage = 2;
        List<String> easyShipShipmentStatuses = null;
        List<String> electronicInvoiceStatuses = null;
        String nextToken = null;
        List<String> amazonOrderIds = null;
        String actualFulfillmentSupplySourceId = null;
        Boolean isISPU = null;
        String storeChainStoreId = null;
        String earliestDeliveryDateBefore = null;
        String earliestDeliveryDateAfter = null;
        String latestDeliveryDateBefore = null;
        String latestDeliveryDateAfter = null;
        GetOrdersResponse response = api.getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter);
        System.out.println("response = " + new Gson().toJson(response));
// TODO: test validations
    }

    /**
     * Updates (approves or rejects) the verification status of an order containing regulated products.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.5 | 30 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void updateVerificationStatusTest() throws ApiException, LWAException {
        String orderId = null;
        UpdateVerificationStatusRequest payload = null;
        api.updateVerificationStatus(orderId, payload);

// TODO: test validations
    }


    /**
     * Returns orders created or updated during the time frame indicated by the specified parameters. You can also apply a range of filtering criteria to narrow the list of orders returned. If NextToken is present, that will be used to retrieve the orders instead of other criteria.  **Usage Plan:**  | Rate (requests per second) | Burst | | ---- | ---- | | 0.0167 | 20 |  The &#x60;x-amzn-RateLimit-Limit&#x60; response header returns the usage plan rate limits that were applied to the requested operation, when available. The table above indicates the default rate and burst values for this operation. Selling partners whose business demands require higher throughput may see higher rate and burst values then those shown here. For more information, see [Usage Plans and Rate Limits in the Selling Partner API](doc:usage-plans-and-rate-limits-in-the-sp-api).
     *
     *        request.MarketplaceId = new List<string>();
     *        request.FulfillmentChannel = new List<string>();
     *
     *
     *         string applicatonName = Assembly.GetExecutingAssembly().GetName().Name;
     *          string applicationVersion = Assembly.GetExecutingAssembly().GetName().Version.ToString();
     * @throws ApiException if the Api call fails
     * @throws LWAException If calls to fetch LWA access token fails
     */
    @Test
    public void getOrdersBopTest() throws ApiException, LWAException {
//        List<String> marketplaceIds = Arrays.asList( MarketPlaceId.split("\\|"));
//        ATVPDKIKX0DER=United States of .    America https://developer-docs.amazon.com/sp-api/docs/marketplace-ids
//        AmazonMWSEndpoint.NA
        List<String> marketplaceIds = Lists.newArrayList("ATVPDKIKX0DER","A2EUQ1WTGCTBG2");
        String createdAfter = null;
//        String createdAfter = "2024-06-01";
        String createdBefore = null;

        LocalDateTime localDateTime = LocalDateTime.now();
//        如果debug是3小时，正常是3天
//        localDateTime.minusHours(3);
        LocalDateTime newLocalDatTime=localDateTime.minusDays(3);
        String lastUpdatedAfter = newLocalDatTime.toString();
        String lastUpdatedBefore = null;
        /**
         * A list of OrderStatus values used to filter the results.
         *
         * Possible values:
         * - PendingAvailability (This status is available for pre-orders only. The order has been placed, payment has not been authorized, and the release date of the item is in the future.)
         * - Pending (The order has been placed but payment has not been authorized.)
         * - Unshipped (Payment has been authorized and the order is ready for shipment, but no items in the order have been shipped.)
         * - PartiallyShipped (One or more, but not all, items in the order have been shipped.)
         * - Shipped (All items in the order have been shipped.)
         * - InvoiceUnconfirmed (All items in the order have been shipped. The seller has not yet given confirmation to Amazon that the invoice has been shipped to the buyer.)
         * - Canceled (The order has been canceled.)
         * - Unfulfillable (The order cannot be fulfilled. This state applies only to Multi-Channel Fulfillment orders.)
         */
        List<String> orderStatuses = Lists.newArrayList("Unshipped","PartiallyShipped","Canceled","InvoiceUnconfirmed","Unfulfillable","Shipped");
        /**
         * A list that indicates how an order was fulfilled. Filters the results by fulfillment channel. Possible values: AFN (Fulfillment by Amazon); MFN (Fulfilled by the seller).
         */
        List<String> fulfillmentChannels = Lists.newArrayList("AFN","MFN");
        List<String> paymentMethods = null;
        String buyerEmail = null;
        String sellerOrderId = null;
        //A number that indicates the maximum number of orders that can be returned per page. Value must be 1 - 100. Default 100.
        Integer maxResultsPerPage = null;
        List<String> easyShipShipmentStatuses = null;
        List<String> electronicInvoiceStatuses = null;
        String nextToken = null;
        List<String> amazonOrderIds = null;
        String actualFulfillmentSupplySourceId = null;
        Boolean isISPU = null;
        String storeChainStoreId = null;
        String earliestDeliveryDateBefore = null;
        String earliestDeliveryDateAfter = null;
        String latestDeliveryDateBefore = null;
        String latestDeliveryDateAfter = null;
        GetOrdersResponse response = api.getOrders(marketplaceIds, createdAfter, createdBefore, lastUpdatedAfter, lastUpdatedBefore, orderStatuses, fulfillmentChannels, paymentMethods, buyerEmail, sellerOrderId, maxResultsPerPage, easyShipShipmentStatuses, electronicInvoiceStatuses, nextToken, amazonOrderIds, actualFulfillmentSupplySourceId, isISPU, storeChainStoreId, earliestDeliveryDateBefore, earliestDeliveryDateAfter, latestDeliveryDateBefore, latestDeliveryDateAfter);
        System.out.println("response = " + new Gson().toJson(response));
// TODO: test validations
    }

//    OrderHeaderType header = new OrderHeaderType();
//    header.AmazonOrderID = order.IsSetAmazonOrderId() == true ? order.AmazonOrderId : header.AmazonOrderID;
//    header.PurchaseDate = order.IsSetPurchaseDate() == true ? order.PurchaseDate : header.PurchaseDate;
//    header.LastUpdateDate = order.IsSetLastUpdateDate() == true ? order.LastUpdateDate : header.LastUpdateDate;
//    header.OrderStatus = order.IsSetOrderStatus() == true ? order.OrderStatus : header.OrderStatus;
//    header.OrderType = order.IsSetOrderType() == true ? order.OrderType : header.OrderType;
//    header.FulfillmentChannel = order.IsSetFulfillmentChannel() == true ? order.FulfillmentChannel : header.FulfillmentChannel;
//    header.SalesChannel = order.IsSetSalesChannel() == true ? order.SalesChannel : header.SalesChannel;
//    header.OrderChannel = order.IsSetOrderChannel() == true ? order.OrderChannel : header.OrderChannel;
//    header.ShipServiceLevel = order.IsSetShipServiceLevel() == true ? order.ShipServiceLevel : header.ShipServiceLevel;
//    header.CurrencyCode = order.IsSetOrderTotal() == true ? order.OrderTotal.CurrencyCode : header.CurrencyCode;
//    header.Amount = order.IsSetOrderTotal() == true ? ConvertUtility.ToDecimal(order.OrderTotal.Amount) : header.Amount;
//  if (order.IsSetShippingAddress())
//    {
//        header.ShipName = order.ShippingAddress.IsSetName() == true ? order.ShippingAddress.Name : header.ShipName;
//        header.ShipAddr1 = order.ShippingAddress.IsSetAddressLine1() == true ? order.ShippingAddress.AddressLine1 : header.ShipAddr1;
//        header.ShipAddr2 = order.ShippingAddress.IsSetAddressLine2() == true ? order.ShippingAddress.AddressLine2 : header.ShipAddr2;
//        header.ShipAddr3 = order.ShippingAddress.IsSetAddressLine3() == true ? order.ShippingAddress.AddressLine3 : header.ShipAddr3;
//        header.ShipCity = order.ShippingAddress.IsSetCity() == true ? order.ShippingAddress.City : header.ShipCity;
//        header.ShipCounty = order.ShippingAddress.IsSetCounty() == true ? order.ShippingAddress.County : header.ShipCounty;
//        header.ShipDisctrict = order.ShippingAddress.IsSetDistrict() == true ? order.ShippingAddress.District : header.ShipDisctrict;
//        header.ShipZip = order.ShippingAddress.IsSetPostalCode() == true ? order.ShippingAddress.PostalCode : header.ShipZip;
//        header.ShipState = order.ShippingAddress.IsSetStateOrRegion() == true ? order.ShippingAddress.StateOrRegion : header.OrderStatus;
//        header.ShipCountry = order.ShippingAddress.IsSetCountryCode() == true ? order.ShippingAddress.CountryCode : header.ShipCountry;
//        header.Phone = order.ShippingAddress.IsSetPhone() == true ? order.ShippingAddress.Phone : header.Phone;
//    }
//    header.NumberOfItemsShipped = order.IsSetNumberOfItemsShipped() == true ? ConvertUtility.ToInt(order.NumberOfItemsShipped) : header.NumberOfItemsShipped;
//    header.NumberOfItemsUnshipped = order.IsSetNumberOfItemsUnshipped() == true ? ConvertUtility.ToInt(order.NumberOfItemsUnshipped) : header.NumberOfItemsUnshipped;
//    header.PaymentMethod = order.IsSetPaymentMethod() == true ? order.PaymentMethod : header.PaymentMethod;
//    header.MarketplaceID = order.IsSetMarketplaceId() == true ? order.MarketplaceId : header.MarketplaceID;
//    header.BuyerName = order.IsSetBuyerName() == true ? order.BuyerName : header.BuyerName;
//    header.BuyerEmail = order.IsSetBuyerEmail() == true ? order.BuyerEmail : header.BuyerEmail;
//    header.ShippedByAmazonTFM = order.IsSetShippedByAmazonTFM() == true ? order.ShippedByAmazonTFM : header.ShippedByAmazonTFM;
//    header.TFMShipmentStatus = order.IsSetTFMShipmentStatus() == true ? order.TFMShipmentStatus : header.TFMShipmentStatus;
//    header.CbaDisplayableShippingLabel = order.IsSetCbaDisplayableShippingLabel() == true ? order.CbaDisplayableShippingLabel : header.CbaDisplayableShippingLabel;
//    header.ShipmentServiceLevelCategory = order.IsSetShipmentServiceLevelCategory() == true ? order.ShipmentServiceLevelCategory : header.ShipmentServiceLevelCategory;
//    header.EarliestShipDate = order.IsSetEarliestShipDate() == true ? order.EarliestShipDate : header.EarliestShipDate;
//    header.LatestShipDate = order.IsSetLatestShipDate() == true ? order.LatestShipDate : header.LatestShipDate;
//    header.EarliestDeliveryDate = order.IsSetEarliestDeliveryDate() == true ? order.EarliestDeliveryDate : header.EarliestDeliveryDate;
//    header.LatestDeliveryDate = order.IsSetLatestDeliveryDate() == true ? order.LatestDeliveryDate : header.LatestDeliveryDate;
//    header.IsBusinessOrder = order.IsSetIsBusinessOrder() == true ? order.IsBusinessOrder : header.IsBusinessOrder;
//    header.PurchaseOrderNumber = order.IsSetPurchaseOrderNumber() == true ? order.PurchaseOrderNumber : header.PurchaseOrderNumber;
//    header.IsPrime = order.IsSetIsPrime() == true ? order.IsPrime : header.IsPrime;
//    header.IsPremiumOrder = order.IsSetIsPremiumOrder() == true ? order.IsPremiumOrder : header.IsPremiumOrder;
//  _OrderRepository.AddOrder(header);

}